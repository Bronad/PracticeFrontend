    html
        there are Block Elements -> Takes entire Line in container
        inline-Block Elements -> only Takes Space it needs, not the Whole Line

    
    CSS & Fonts: 
        Können über <link rel= "stylesheet" href=Hier der Link> geadded werden
        div is just a Box -> a container. Div is a Block Element
    
    Objekte: 
      Variablen für Objekte sind wie in C nur Referenzen Auf Spreicher. Deswegen können diese Const sein.
        Dabei Ist bei einer Objekt = Objekt -> Zeigt beides auf den selben Speicher.
        You cant compare Objects wiht object === object -> this only compares the Referenzes

        Shortcuts:
            const message = object.message; ist gleich 
            const {message} = object;
            -> kann auch bei mehreren Variablen gemacht werden: 
            const {message, anderemessage} = object so hätte man message & anderemessage als einzelne Vars
            -> wenn man den Inhalt einer Var in Objekt haben will: 
                Object{message}-> erstellt automatisch Var mit namen "message" & den Inhalt den es Referenziert.
            functions können auch einfach mit Bla(){Algo} im Objekt abgekürzt werden.
        Arrays are Objects -> new for me: dasArray.push(stuff) -> puts stuff on the End of the List
                    .splice(start of removel, how many to remove from there)
                    .slice(); -> Creats a New Array with Same Values;
            There is a Shortcut to Referenz & assgin Values of a Array to Vars
                -> const [firstValue, secondValue, thirdValue] = [23, 366, 69];
            Arrays are only a Referenz to Memory, like in C++.
            .filter((value, index) => {//code}) function works like for Each
                -> returns a new Array when the Code returns true. 
            .map((value, index) = > {//Code returns Value})
                Creates a new array, where the Operation returns the new Value of the index

    JSON:
        Ansammelung an Strings. Kann keine Funktionen tragen. 
        Kann in Objekte übertragen werden mit JSON.parse(localStorage.getItem("Stuff"))

    To Change a String into a Number use Number(String) -> only wokerd on Storage in a Var.
    Also works other Way Around with String()
    Math with Strings is wierd, + Makes String + Number to String and just puts them together, Sub works and makes both Numbers
        -> dont do Math with Strings

    Window Element is for all-> has console, document, Popups etc. 
        -> Window is built in, doesnt have to be wirtten out. automatisch geadded through JS

    Loops:
        break -> breaks out of the loop early
        continue; -> will skip to the next Iteration
        Can be combined with the forEach(function(Value, index){}) function. Will loop Through every Elemtent, with the Value Stored in value. 
            -> cant really use Break to get out of that Loop Early

    Advanced Functions:
        making a param optional can be done with ? after the Var. 
        Is also just a type can be assgined Var -> can be Run with Var name and Brackets.
        function saved inside an Object is Called Method. -> fun: function(){code};
        function can be passed as a Param in a function.
        anonymus functions can be declared without names. -> once use or set to Var for Example.

        setTimeout(function, Delay in MS);
            -> first Value is a function, second is a Timeout in MS. 
            Async
        SetInterval() -> gleich wie Timeout nur wiederholt sich das nach jedem Run der Zeit.
            can for Example be used to write an Autoplay Mode
        Arrowfunctions -> kann einer Var zugefügt werden. Wird so verwendet 
            wird vorallem verwendet um Funktionen in anderen Funktionen zu passen
            const varname = (param1, param2...)  => { //Code }
                kann dann mit varname(); ausgeführt werden
                Kann auch werte returnen
            const oneParam = param => {code}
                Hier brauch es keine Klammerung, wenn es sich nur um einem Param handelt.
            const OneLine = () => 4+5; 
                funktioniert, da die auszuführende Funktion nich über eine Line hinausgeht.
        
Sync Code will Wait, async will go on without waiting. 

